/*
* Argus Open Source
* Software to apply Statistical Disclosure Control techniques
* 
* Copyright 2014 Statistics Netherlands
* 
* This program is free software; you can redistribute it and/or 
* modify it under the terms of the European Union Public Licence 
* (EUPL) version 1.1, as published by the European Commission.
* 
* You can find the text of the EUPL v1.1 on
* https://joinup.ec.europa.eu/software/page/eupl/licence-eupl
* 
* This software is distributed on an "AS IS" basis without 
* warranties or conditions of any kind, either express or implied.
*/

package tauargus.gui;

import argus.utils.StrUtils;
import argus.utils.SystemUtils;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.io.FilenameUtils;
import tauargus.model.Application;
import tauargus.model.ArgusException;
import tauargus.model.Metadata;
import tauargus.model.TableSet;
import tauargus.model.Variable;
import tauargus.service.TableService;
import tauargus.utils.TauArgusUtils;

/**
 *
 * @author ahnl
 */
public class DialogWriteBatchFile extends DialogBase {

    private String batchFile;
    private TableSet tableSet;
    /*
     * Creates new form DialogWriteBatchFile
     */
    public DialogWriteBatchFile(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        batchFile = "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jFileChooser2 = new javax.swing.JFileChooser();
        JLableText = new javax.swing.JLabel();
        textBatchFileName = new javax.swing.JTextField();
        jButtonSearchBatchFile = new javax.swing.JButton();
        jButtonWriteBatch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Write a ARGUS batch file");

        JLableText.setText("Create a batch file");

        textBatchFileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textBatchFileNameActionPerformed(evt);
            }
        });
        textBatchFileName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textBatchFileNameFocusLost(evt);
            }
        });
        textBatchFileName.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                textBatchFileNamePropertyChange(evt);
            }
        });

        jButtonSearchBatchFile.setText("...");
        jButtonSearchBatchFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchBatchFileActionPerformed(evt);
            }
        });

        jButtonWriteBatch.setText("Write batch file");
        jButtonWriteBatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonWriteBatchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JLableText, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textBatchFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonSearchBatchFile, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(jButtonWriteBatch)))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(JLableText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textBatchFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearchBatchFile))
                .addGap(28, 28, 28)
                .addComponent(jButtonWriteBatch)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSearchBatchFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchBatchFileActionPerformed
        // TODO add your handling code here:
        boolean oke;  
        TauArgusUtils.getDataDirFromRegistry(jFileChooser1);
 
        jFileChooser1.setDialogTitle("Safe file name");
        jFileChooser1.setSelectedFile(new File(""));
        jFileChooser1.resetChoosableFileFilters();

        // filters are shown in order of declaration, setFileFilter sets the default filter
        batchFile = ""; oke = false;       
        jFileChooser1.setFileFilter(new FileNameExtensionFilter("Argus batch file (*.arb)", "arb"));

        if (jFileChooser1.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            batchFile=jFileChooser1.getSelectedFile().toString();}
        
        if (FilenameUtils.getExtension(batchFile).equals("") && !batchFile.equals("")) {
            batchFile = batchFile+ ".arb";}

        textBatchFileName.setText(batchFile);
        TauArgusUtils.putDataDirInRegistry(batchFile);
    }//GEN-LAST:event_jButtonSearchBatchFileActionPerformed

    private void textBatchFileNamePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_textBatchFileNamePropertyChange
         batchFile = textBatchFileName.getText();
    }//GEN-LAST:event_textBatchFileNamePropertyChange

    private void textBatchFileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textBatchFileNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textBatchFileNameActionPerformed

    private void jButtonWriteBatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonWriteBatchActionPerformed
      if (batchFile.equals("")){
          JOptionPane.showMessageDialog(DialogWriteBatchFile.this, "No batch file name specified");
      return;
      } 
      if (TauArgusUtils.ExistFile(batchFile)) { //ask for overwrite
         int result = JOptionPane.showConfirmDialog(DialogWriteBatchFile.this, "The file "+batchFile+" exists already.\n"+
                    "Do you want to overwrite?", "",JOptionPane.YES_NO_OPTION);
         if (result == JOptionPane.NO_OPTION){ return;}
      }
        try{
            doWriteBatchFile();
            setVisible(false);
            dispose();
          }
          catch(ArgusException ex) {
            JOptionPane.showMessageDialog(DialogWriteBatchFile.this, ex.getMessage());
          }
    }//GEN-LAST:event_jButtonWriteBatchActionPerformed

    private void textBatchFileNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textBatchFileNameFocusLost
        batchFile = textBatchFileName.getText();
        Metadata metadata = Application.getMetadata(0);
        batchFile = TauArgusUtils.addPathExt(batchFile, metadata.dataFile, ".arb");
        textBatchFileName.setText(batchFile);
    }//GEN-LAST:event_textBatchFileNameFocusLost

    private void doWriteBatchFile()throws ArgusException{
        // This is only possible and feasible interactively so the code is specified here
        String hs; Variable variable; int i,j,k,t;
        try{
            BufferedWriter batch = new BufferedWriter(new FileWriter(batchFile));  
            batch.write("//This batch file was generated by Tau-ARGUS"); batch.newLine();
            Date date = new Date();
            hs = date.toString();
            batch.write("//Date "+ hs); batch.newLine();
            batch.write("//"); batch.newLine();
            for ( i = 0; i < Application.numberOfMetadatas(); i++) {
                Metadata metadata = Application.getMetadata(i);
                String dataFile = metadata.dataFile;
                String metafile = metadata.metaFile;
                if (metadata.dataOrigin == Metadata.DATA_ORIGIN_MICRO){batch.write("<OPENMICRODATA>   ");} 
                else{batch.write("<OPENTABLEDATA> ");}
                batch.write(" \""  +dataFile+"\""); batch.newLine();
                batch.write("<OPENMETADATA>     \""  +metafile+"\""); batch.newLine();
                if ((i==0) && (metadata.dataOrigin == Metadata.DATA_ORIGIN_MICRO) ){ //microdata tables
                    for (t=0; t<TableService.numberOfTables();t++){
                        tableSet= TableService.getTable(t);
                        hs = "<SPECIFYTABLE>     ";
                        for (k=0;k<tableSet.expVar.size();k++){
                            variable = tableSet.expVar.get(k);  
                            hs = hs + StrUtils.quote(variable.name); 
                        }
                        variable = tableSet.respVar;
                        hs = hs + "|";
                        if (variable!=null){ hs = hs + StrUtils.quote(variable.name); } 
                        variable = tableSet.shadowVar;
                        hs = hs + "|";
                        if (variable!=null){ hs = hs + StrUtils.quote(variable.name); } 
                        variable = tableSet.costVar;
                        hs = hs + "|";
                        switch (tableSet.costFunc) {
                            case TableSet.COST_VAR:
                                if (variable!=null){ hs = hs + StrUtils.quote(variable.name);}
                                break;
                            case TableSet.COST_UNITY:
                                hs = hs + "-2";
                                break;
                            case TableSet.COST_FREQ:
                                hs = hs + "-1";
                                break;
                            case TableSet.COST_DIST:
                                hs = hs + "-3";
                                break;
                            default:
                                break;
                        }
                        if (tableSet.lambda!=1) hs = hs + "|" + Double.toString(tableSet.lambda);
                        batch.write(hs); batch.newLine();

                        hs = "<SAFETYRULE>       ";
                        k=2;if(tableSet.holding){k=4;}
                        if (tableSet.domRule){
                            for (j=0;j<k;j++){
                                hs = hs + "NK("+Integer.toString(tableSet.domN[j])+ "," +Integer.toString(tableSet.domK[j])+ ")|";
                            }  
                        }
                        if(tableSet.pqRule){
                            for (j=0;j<k;j++){
                                hs = hs+ "P("+Integer.toString(tableSet.pqP[j])+ "," + Integer.toString(tableSet.pqQ[j]) + "," + 
                                        Integer.toString(tableSet.pqN[j]) + ")|" ; 
                            }  
                        }
                        if (tableSet.zeroUnsafe){hs = hs + "ZERO("+Double.toString(tableSet.zeroRange)+")|";}
                        k=1;if(tableSet.holding){k=2;}
                        if ((tableSet.minFreq[0] !=0) || (tableSet.minFreq[1] !=0)){
                            for (j=0;j<k;j++){  
                                hs = hs + "FREQ("+Integer.toString(tableSet.minFreq[j])+"," + Integer.toString(tableSet.frequencyMarge[j])+")|";
                            }
                        }
                        if (tableSet.piepRule[0]){
                            hs = hs + "REQ("+ Integer.toString(tableSet.piepPercentage[0])+"," +
                                                Integer.toString(tableSet.piepPercentage[1])+","+ 
                                                Integer.toString(tableSet.piepMinFreq[0])+","+ 
                                                Integer.toString(tableSet.piepMarge[0])+")|";                  
                        } 
                        if (tableSet.piepRule[1]){
                            hs = hs + "REQ("+ Integer.toString(tableSet.piepPercentage[2])+"," +
                                                Integer.toString(tableSet.piepPercentage[3])+","+ 
                                                Integer.toString(tableSet.piepMinFreq[1])+","+ 
                                                Integer.toString(tableSet.piepMarge[1])+")|";                  
                        } 
                        if (tableSet.weighted){
                            hs = hs + "WGT(1)|";
                        }
                        if (tableSet.missingIsSafe){
                            hs = hs + "MIS(1)|";
                        }
                        hs = hs.substring(0, hs.length()-1);
                        batch.write(hs); batch.newLine();
                    }
                }
                else{ //tabular input
                    tableSet= TableService.getTable(0);
                    hs = "<SPECIFYTABLE>     ";
                    for (k=0;k<tableSet.expVar.size();k++){
                        variable = tableSet.expVar.get(k);  
                        hs = hs + StrUtils.quote(variable.name); 
                    }
                    variable = tableSet.respVar;
                    hs = hs + "|";
                    if (variable!=null){ hs = hs + StrUtils.quote(variable.name); } 
                    variable = tableSet.shadowVar;
                    hs = hs + "|";
                    if (variable!=null){ hs = hs + StrUtils.quote(variable.name); } 
                    variable = tableSet.costVar;
                    hs = hs + "|";
                    switch (tableSet.costFunc) {
                        case TableSet.COST_VAR:
                            if (variable!=null){ hs = hs + StrUtils.quote(variable.name);}
                            break;
                        case TableSet.COST_UNITY:
                            hs = hs + "-2";
                            break;
                        case TableSet.COST_FREQ:
                            hs = hs + "-1";
                            break;
                        case TableSet.COST_DIST:
                            hs = hs + "-3";
                            break;
                        default:
                            break;
                    }
                    if (tableSet.lambda!=1) hs = hs + "|" + Double.toString(tableSet.lambda);
                    batch.write(hs); batch.newLine();
                }
                
                
                if (metadata.dataOrigin == Metadata.DATA_ORIGIN_MICRO){  
                    batch.write("<READMICRODATA>"); batch.newLine();            
                } else{ // tabular input
                    batch.write("<READTABLE>");
                    tableSet= TableService.getTable(0);
                    batch.write(" "+tableSet.additivity);
                    if(tableSet.computeTotals && tableSet.keepStatus){batch.write("T");}
                    batch.newLine(); 
                }

                for (t=0; t<TableService.numberOfTables();t++){
                    tableSet= TableService.getTable(t); 
                    hs = "<SUPPRESS>         ";
                    switch (tableSet.suppressed) {
                        case TableSet.SUP_NO: hs = ""; break; //nothing
                        case TableSet.SUP_JJ_OPT:hs = hs + "OPT(" + Integer.toString(t+1)+ ")" ;
                            break;  
                        case TableSet.SUP_GHMITER: hs = hs + "GH(" + Integer.toString(t+1)+ "," +
                                                        Integer.toString(tableSet.ghMiterAprioryPercentage) + ","+ 
                                                        Integer.toString(tableSet.ghMiterSize)+","+
                                                        Integer.toString((tableSet.ghMiterApplySingleton) ? 1 : 0)+ ")";
                            break;
                  //if size = 2 add 2 parameters
                        case TableSet.SUP_HITAS: hs = hs + "MOD(" + Integer.toString(t+1)+ "," ;
                            hs = hs + Integer.toString(tableSet.maxHitasTime)+ "," ;
                            hs = hs + Integer.toString((tableSet.singletonSingletonCheck ) ? 1 : 0)+ "," ;
                            hs = hs + Integer.toString((tableSet.singletonMultipleCheck) ? 1 : 0)+ "," ;
                            hs = hs + Integer.toString((tableSet.minFreqCheck) ? 1 : 0)+ ")" ;
                            break;
                        case TableSet.SUP_NETWORK: hs = hs + "NET(" + Integer.toString(t+1)+ ")" ; break;
                        case TableSet.SUP_SINGLETON: hs = ""; break;
                        case TableSet.SUP_ROUNDING: hs = hs + "RND("  + Integer.toString(t+1)+ "," ;
                    // Structure differs from what's read when running a batch-file: therefore commented out
                            hs = hs + Integer.toString(tableSet.roundBase) + ",";
                            hs = hs + Integer.toString(tableSet.roundMaxStep) + ",";
                            //hs = hs + "1,";
                            hs = hs + Integer.toString(tableSet.roundMaxTime) + ",";
                            hs = hs + Integer.toString(tableSet.roundPartitions) + ",";
                            //hs = hs + Integer.toString(tableSet.roundNumberofBlocks) + ",";
                            //hs = hs + Integer.toString(tableSet.roundStoppingRule) + ",";
                            hs = hs + Integer.toString(tableSet.roundStoppingRule) + ",";
                            hs = hs + Integer.toString(tableSet.roundUnitCost ? 1 : 0) + ")";                     
                            break;
                        case TableSet.SUP_MARGINAL: hs = ""; break;
                        case TableSet.SUP_UWE: hs = ""; break;
                        case TableSet.SUP_CTA: hs = ""; break;
                        case TableSet.SUP_CKM: hs = hs + "CKM(" + Integer.toString(t+1)+ ")";
                            if (!tableSet.respVar.isResponse()){ // Should be frequency table
                                hs = hs + " " + StrUtils.quote(metadata.getFilePath(tableSet.cellkeyVar.PTableFile));
                            }
                            else{
                                hs = hs + " " + StrUtils.quote(metadata.getFilePath(tableSet.cellkeyVar.PTableFileCont)) + 
                                               " | " + StrUtils.quote(metadata.getFilePath(tableSet.cellkeyVar.PTableFileSep)) +
                                               " | " + ((tableSet.respVar.muC > 0) ? Double.toString(tableSet.respVar.muC) : "");
                                }
                            break;
                    }
                    if(!hs.equals("")){batch.write(hs); batch.newLine();}
                }
                for (t=0; t<TableService.numberOfTables();t++){
                    tableSet= TableService.getTable(t); 
                    if(!tableSet.safeFileName.equals("")){
                        hs = "<WRITETABLE>      (" + Integer.toString(t+1)+ "," + 
                                    Integer.toString(tableSet.safeFileFormat+1)+ "," + 
                                    tableSet.safeFileOptions + "," + StrUtils.quote(tableSet.safeFileName)+ ")";
                        batch.write(hs); batch.newLine();
                    }
                }
                batch.write("<GOINTERACTIVE>"); batch.newLine();
            }
                 
            batch.close();
            SystemUtils.writeLogbook("Batchfile: " + batchFile + " has been written");
        }
        catch(IOException ex) {
            throw new ArgusException("An error occured when writing the batchfile: "+batchFile);    
        }
    }
//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(DialogWriteBatchFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(DialogWriteBatchFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(DialogWriteBatchFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(DialogWriteBatchFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                DialogWriteBatchFile dialog = new DialogWriteBatchFile(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLableText;
    private javax.swing.JButton jButtonSearchBatchFile;
    private javax.swing.JButton jButtonWriteBatch;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JTextField textBatchFileName;
    // End of variables declaration//GEN-END:variables
}
