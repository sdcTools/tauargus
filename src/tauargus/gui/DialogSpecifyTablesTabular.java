/*
* Argus Open Source
* Software to apply Statistical Disclosure Control techniques
* 
* Copyright 2014 Statistics Netherlands
* 
* This program is free software; you can redistribute it and/or 
* modify it under the terms of the European Union Public Licence 
* (EUPL) version 1.1, as published by the European Commission.
* 
* You can find the text of the EUPL v1.1 on
* https://joinup.ec.europa.eu/software/page/eupl/licence-eupl
* 
* This software is distributed on an "AS IS" basis without 
* warranties or conditions of any kind, either express or implied.
*/

package tauargus.gui;

import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import tauargus.model.Application;
import tauargus.model.ArgusException;
import tauargus.model.Metadata;
import tauargus.model.ProgressSwingWorker;
import tauargus.model.TableSet;
import tauargus.model.Variable;
import tauargus.service.TableService;
import tauargus.utils.DoubleInputVerifier;
import tauargus.utils.IntegerInputVerifier;
import tauargus.utils.SwingUtils;
import tauargus.utils.TauArgusUtils;

public class DialogSpecifyTablesTabular extends DialogBase {

    @Override
    protected JRootPane createRootPane() {
        ActionListener actionListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                buttonCancelActionPerformed(actionEvent);
            }
        };    
 
        KeyStroke stroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
        JRootPane rootPane = new JRootPane();
        rootPane.registerKeyboardAction(actionListener, stroke, JComponent.WHEN_IN_FOCUSED_WINDOW);
        return rootPane;
    }
    
    private static final Logger LOGGER = Logger.getLogger(DialogSpecifyMetadata.class.getName());
    
    // ***** Dialog Return Values *****
    public static final int CANCEL_OPTION = 1;
    public static final int APPROVE_OPTION = 0;

    private int returnValue = CANCEL_OPTION;

    /**
     * Creates new form DialogSpecifyTablesTabular
     */
    public DialogSpecifyTablesTabular(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        IntegerInputVerifier integerInputVerifier = new IntegerInputVerifier();
        DoubleInputVerifier doubleInputVerifier = new DoubleInputVerifier();

        textFieldMaxScaleCost.setInputVerifier(doubleInputVerifier);
        textFieldLambda.setInputVerifier(doubleInputVerifier);
        textFieldNumber.setInputVerifier(integerInputVerifier);
        textFieldPercentage.setInputVerifier(integerInputVerifier);
        textFieldP.setInputVerifier(integerInputVerifier);
        textFieldQ.setInputVerifier(integerInputVerifier);
        textFieldN.setInputVerifier(integerInputVerifier);
        textFieldFrequency.setInputVerifier(integerInputVerifier);
        textFieldRange.setInputVerifier(integerInputVerifier);
        textFieldZeroMargin.setInputVerifier(doubleInputVerifier);
        textFieldManualSafetyRange.setInputVerifier(integerInputVerifier);
    }

    public int showDialog(Metadata metadata) {
        load(metadata);
        setLocationRelativeTo(this.getParent());
        setVisible(true);
        return returnValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupAdditivity = new javax.swing.ButtonGroup();
        buttonGroupCostFunction = new javax.swing.ButtonGroup();
        buttonGroupSafetyRules = new javax.swing.ButtonGroup();
        panelVariables = new javax.swing.JPanel();
        labelStatusVar = new javax.swing.JLabel();
        labelFrequencyVar = new javax.swing.JLabel();
        labelTopNVar = new javax.swing.JLabel();
        labelExpVar = new javax.swing.JLabel();
        scrollPaneExpVar = new javax.swing.JScrollPane();
        listExpVar = new javax.swing.JList<>();
        labelNExpVar = new javax.swing.JLabel();
        radioButtonAdditivityForce = new javax.swing.JRadioButton();
        radioButtonAdditivityRecompute = new javax.swing.JRadioButton();
        labelNExpVarCount = new javax.swing.JLabel();
        labelTopNVarCount = new javax.swing.JLabel();
        labelCostVar = new javax.swing.JLabel();
        radioButtonAdditivityNone = new javax.swing.JRadioButton();
        checkBoxKeepStatus = new javax.swing.JCheckBox();
        panelCost = new javax.swing.JPanel();
        radioButtonDistance = new javax.swing.JRadioButton();
        radioButtonUnity = new javax.swing.JRadioButton();
        radioButtonFrequency = new javax.swing.JRadioButton();
        labelLambda = new javax.swing.JLabel();
        labelMaxScaleCost = new javax.swing.JLabel();
        textFieldMaxScaleCost = new javax.swing.JTextField();
        textFieldLambda = new javax.swing.JTextField();
        radioButtonCostVar = new javax.swing.JRadioButton();
        radioButtonResponseVar = new javax.swing.JRadioButton();
        panelSafetyRules = new javax.swing.JPanel();
        radioButtonUseGivenStatus = new javax.swing.JRadioButton();
        radioButtonUseSafetyRules = new javax.swing.JRadioButton();
        checkBoxDominanceRule = new javax.swing.JCheckBox();
        labelNumber = new javax.swing.JLabel();
        labelPercentage = new javax.swing.JLabel();
        textFieldNumber = new javax.swing.JTextField();
        textFieldPercentage = new javax.swing.JTextField();
        checkBoxMinimumFrequency = new javax.swing.JCheckBox();
        labelFrequency = new javax.swing.JLabel();
        labelRange = new javax.swing.JLabel();
        textFieldFrequency = new javax.swing.JTextField();
        textFieldRange = new javax.swing.JTextField();
        checkBoxZeroUnsafe = new javax.swing.JCheckBox();
        labelZeroMargin = new javax.swing.JLabel();
        textFieldZeroMargin = new javax.swing.JTextField();
        checkBoxMissingIsSafe = new javax.swing.JCheckBox();
        labelManualSafetyRange = new javax.swing.JLabel();
        textFieldManualSafetyRange = new javax.swing.JTextField();
        labelPercSign1 = new javax.swing.JLabel();
        labelPercSign2 = new javax.swing.JLabel();
        labelPercSign3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        checkBoxPqRule = new javax.swing.JCheckBox();
        textFieldP = new javax.swing.JTextField();
        textFieldQ = new javax.swing.JTextField();
        textFieldN = new javax.swing.JTextField();
        labelN = new javax.swing.JLabel();
        labelQ = new javax.swing.JLabel();
        labelP = new javax.swing.JLabel();
        buttonOk = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Specify tables");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                dialogClosing(evt);
            }
        });

        panelVariables.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Variables"));
        panelVariables.setPreferredSize(new java.awt.Dimension(306, 137));

        labelStatusVar.setText("Status");

        labelFrequencyVar.setText("Frequency");

        labelTopNVar.setText("TopN:");

        labelExpVar.setText("Explanatory:");

        scrollPaneExpVar.setViewportView(listExpVar);

        labelNExpVar.setText("Number:");

        buttonGroupAdditivity.add(radioButtonAdditivityForce);
        radioButtonAdditivityForce.setText("Do not allow non-additivity");

        buttonGroupAdditivity.add(radioButtonAdditivityRecompute);
        radioButtonAdditivityRecompute.setText("Compute incorrect totals");
        radioButtonAdditivityRecompute.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioButtonAdditivityRecomputeItemStateChanged(evt);
            }
        });

        labelCostVar.setText("Cost");

        buttonGroupAdditivity.add(radioButtonAdditivityNone);
        radioButtonAdditivityNone.setText("Allow non-additivity");

        checkBoxKeepStatus.setText("Keep given status");
        checkBoxKeepStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxKeepStatusItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout panelVariablesLayout = new javax.swing.GroupLayout(panelVariables);
        panelVariables.setLayout(panelVariablesLayout);
        panelVariablesLayout.setHorizontalGroup(
            panelVariablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVariablesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelVariablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelVariablesLayout.createSequentialGroup()
                        .addComponent(labelNExpVar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelNExpVarCount, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(labelTopNVar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelTopNVarCount, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(labelStatusVar)
                        .addGap(15, 15, 15)
                        .addComponent(labelFrequencyVar)
                        .addGap(15, 15, 15)
                        .addComponent(labelCostVar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVariablesLayout.createSequentialGroup()
                        .addGroup(panelVariablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelExpVar)
                            .addGroup(panelVariablesLayout.createSequentialGroup()
                                .addComponent(scrollPaneExpVar, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelVariablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelVariablesLayout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(checkBoxKeepStatus))
                                    .addComponent(radioButtonAdditivityForce)
                                    .addComponent(radioButtonAdditivityNone)
                                    .addComponent(radioButtonAdditivityRecompute))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        panelVariablesLayout.setVerticalGroup(
            panelVariablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVariablesLayout.createSequentialGroup()
                .addGroup(panelVariablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelVariablesLayout.createSequentialGroup()
                        .addComponent(labelExpVar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollPaneExpVar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(panelVariablesLayout.createSequentialGroup()
                        .addGap(0, 15, Short.MAX_VALUE)
                        .addComponent(radioButtonAdditivityForce)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioButtonAdditivityRecompute)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoxKeepStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioButtonAdditivityNone)))
                .addGap(7, 7, 7)
                .addGroup(panelVariablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelNExpVarCount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelVariablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelNExpVar)
                        .addComponent(labelTopNVar)
                        .addComponent(labelStatusVar)
                        .addComponent(labelFrequencyVar)
                        .addComponent(labelTopNVarCount, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelCostVar))))
        );

        panelCost.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Cost function for secondary suppression"));

        buttonGroupCostFunction.add(radioButtonDistance);
        radioButtonDistance.setText("Distance");
        radioButtonDistance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGroupCostActionPerformed(evt);
            }
        });

        buttonGroupCostFunction.add(radioButtonUnity);
        radioButtonUnity.setText("Unity");
        radioButtonUnity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGroupCostActionPerformed(evt);
            }
        });

        buttonGroupCostFunction.add(radioButtonFrequency);
        radioButtonFrequency.setText("Frequency");
        radioButtonFrequency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGroupCostActionPerformed(evt);
            }
        });

        labelLambda.setLabelFor(textFieldLambda);
        labelLambda.setText("Lambda:");

        labelMaxScaleCost.setLabelFor(textFieldMaxScaleCost);
        labelMaxScaleCost.setText("MaxScaleCost:");

        buttonGroupCostFunction.add(radioButtonCostVar);
        radioButtonCostVar.setText("Cost variable");
        radioButtonCostVar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGroupCostActionPerformed(evt);
            }
        });

        buttonGroupCostFunction.add(radioButtonResponseVar);
        radioButtonResponseVar.setText("Response variable");
        radioButtonResponseVar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGroupCostActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelCostLayout = new javax.swing.GroupLayout(panelCost);
        panelCost.setLayout(panelCostLayout);
        panelCostLayout.setHorizontalGroup(
            panelCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCostLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioButtonUnity)
                    .addComponent(radioButtonDistance)
                    .addComponent(radioButtonFrequency)
                    .addComponent(radioButtonCostVar)
                    .addComponent(radioButtonResponseVar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addGroup(panelCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelMaxScaleCost)
                    .addComponent(labelLambda))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textFieldMaxScaleCost, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldLambda, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        panelCostLayout.setVerticalGroup(
            panelCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCostLayout.createSequentialGroup()
                .addGroup(panelCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMaxScaleCost)
                    .addComponent(textFieldMaxScaleCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioButtonResponseVar))
                .addGap(0, 0, 0)
                .addGroup(panelCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textFieldLambda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelCostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelLambda)
                        .addComponent(radioButtonCostVar))
                    .addGroup(panelCostLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(radioButtonFrequency)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioButtonUnity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioButtonDistance)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        panelSafetyRules.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Safety rules"));

        buttonGroupSafetyRules.add(radioButtonUseGivenStatus);
        radioButtonUseGivenStatus.setText("Use given status");
        radioButtonUseGivenStatus.setMargin(new java.awt.Insets(2, -2, 2, 2));
        radioButtonUseGivenStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                safetyRulesActionPerformed(evt);
            }
        });

        buttonGroupSafetyRules.add(radioButtonUseSafetyRules);
        radioButtonUseSafetyRules.setText("Use safety rules");
        radioButtonUseSafetyRules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                safetyRulesActionPerformed(evt);
            }
        });

        checkBoxDominanceRule.setText("Dominance rule");
        checkBoxDominanceRule.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        checkBoxDominanceRule.setMargin(new java.awt.Insets(2, -2, 2, 2));
        checkBoxDominanceRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                safetyRulesActionPerformed(evt);
            }
        });

        labelNumber.setLabelFor(textFieldNumber);
        labelNumber.setText("Number:");

        labelPercentage.setLabelFor(textFieldPercentage);
        labelPercentage.setText("Percentage:");

        checkBoxMinimumFrequency.setText("Minimum frequency");
        checkBoxMinimumFrequency.setMargin(new java.awt.Insets(2, -2, 2, 2));
        checkBoxMinimumFrequency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                safetyRulesActionPerformed(evt);
            }
        });

        labelFrequency.setLabelFor(textFieldFrequency);
        labelFrequency.setText("Frequency:");

        labelRange.setLabelFor(textFieldRange);
        labelRange.setText("Range:");

        checkBoxZeroUnsafe.setText("Zero unsafe");
        checkBoxZeroUnsafe.setMargin(new java.awt.Insets(2, -2, 2, 2));
        checkBoxZeroUnsafe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                safetyRulesActionPerformed(evt);
            }
        });

        labelZeroMargin.setLabelFor(textFieldZeroMargin);
        labelZeroMargin.setText("Zero margin:");

        checkBoxMissingIsSafe.setText("Missing = safe");
        checkBoxMissingIsSafe.setMargin(new java.awt.Insets(2, -2, 2, 2));

        labelManualSafetyRange.setLabelFor(textFieldManualSafetyRange);
        labelManualSafetyRange.setText("Manual safety range:");

        labelPercSign1.setText("%");

        labelPercSign2.setText("%");

        labelPercSign3.setText("%");

        checkBoxPqRule.setText("PQ-rule");
        checkBoxPqRule.setMargin(new java.awt.Insets(2, -2, 2, 2));
        checkBoxPqRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                safetyRulesActionPerformed(evt);
            }
        });

        labelN.setLabelFor(textFieldN);
        labelN.setText("N:");

        labelQ.setLabelFor(textFieldQ);
        labelQ.setText("Q:");

        labelP.setLabelFor(textFieldP);
        labelP.setText("P:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkBoxPqRule)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(labelQ)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(textFieldQ, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(labelP)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(textFieldP, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(labelN)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(textFieldN, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(checkBoxPqRule)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelP)
                    .addComponent(textFieldP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelQ)
                    .addComponent(textFieldQ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelN)
                    .addComponent(textFieldN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelSafetyRulesLayout = new javax.swing.GroupLayout(panelSafetyRules);
        panelSafetyRules.setLayout(panelSafetyRulesLayout);
        panelSafetyRulesLayout.setHorizontalGroup(
            panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSafetyRulesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSafetyRulesLayout.createSequentialGroup()
                        .addGroup(panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelSafetyRulesLayout.createSequentialGroup()
                                .addComponent(radioButtonUseGivenStatus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radioButtonUseSafetyRules))
                            .addGroup(panelSafetyRulesLayout.createSequentialGroup()
                                .addGroup(panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkBoxDominanceRule)
                                    .addGroup(panelSafetyRulesLayout.createSequentialGroup()
                                        .addGroup(panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(labelNumber)
                                            .addComponent(labelPercentage))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(textFieldNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(panelSafetyRulesLayout.createSequentialGroup()
                                                .addComponent(textFieldPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(labelPercSign1)))))
                                .addGap(33, 33, 33)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(28, 28, 28)
                        .addGroup(panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkBoxMinimumFrequency)
                            .addGroup(panelSafetyRulesLayout.createSequentialGroup()
                                .addGroup(panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(labelRange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelFrequency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textFieldFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textFieldRange, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelPercSign2)))
                        .addGap(50, 50, 50)
                        .addGroup(panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelSafetyRulesLayout.createSequentialGroup()
                                .addComponent(checkBoxMissingIsSafe)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(panelSafetyRulesLayout.createSequentialGroup()
                                .addGroup(panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelSafetyRulesLayout.createSequentialGroup()
                                        .addComponent(labelZeroMargin)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textFieldZeroMargin, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(checkBoxZeroUnsafe))
                                .addContainerGap(27, Short.MAX_VALUE))))
                    .addGroup(panelSafetyRulesLayout.createSequentialGroup()
                        .addComponent(labelManualSafetyRange)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldManualSafetyRange, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelPercSign3)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panelSafetyRulesLayout.setVerticalGroup(
            panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSafetyRulesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioButtonUseGivenStatus)
                    .addComponent(radioButtonUseSafetyRules))
                .addGap(18, 18, 18)
                .addGroup(panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelSafetyRulesLayout.createSequentialGroup()
                        .addGroup(panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkBoxDominanceRule)
                            .addComponent(checkBoxMinimumFrequency)
                            .addComponent(checkBoxZeroUnsafe))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelNumber)
                            .addComponent(textFieldNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelFrequency)
                            .addComponent(textFieldFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelZeroMargin)
                            .addComponent(textFieldZeroMargin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelSafetyRulesLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelPercentage)
                                    .addComponent(textFieldPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelRange)
                                    .addComponent(textFieldRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelPercSign1)
                                    .addComponent(labelPercSign2)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSafetyRulesLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(checkBoxMissingIsSafe))))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelSafetyRulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelManualSafetyRange)
                    .addComponent(textFieldManualSafetyRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPercSign3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonOk.setText("OK");
        buttonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOkActionPerformed(evt);
            }
        });

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelVariables, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelCost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(4, 4, 4))
                    .addComponent(panelSafetyRules, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonOk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelVariables, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addComponent(panelCost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSafetyRules, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonOk)
                    .addComponent(buttonCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void organizeCost() {
        boolean b = buttonGroupCostFunction.getSelection() != null && !radioButtonUnity.isSelected();
        labelLambda.setEnabled(b);
        textFieldLambda.setEnabled(b);
    }

    private void organizeSafetyRules() {
        boolean b = radioButtonUseSafetyRules.isSelected();
        boolean b1;

        b1 = b && labelTopNVar.isEnabled();
        checkBoxDominanceRule.setEnabled(b1);
        checkBoxPqRule.setEnabled(b1 && Integer.parseInt(labelTopNVarCount.getText()) > 1);

        b1 = b && labelFrequencyVar.isEnabled();
        checkBoxMinimumFrequency.setEnabled(b1);
        
        checkBoxZeroUnsafe.setEnabled(b);
        checkBoxMissingIsSafe.setEnabled(b);
        
        b1 = checkBoxDominanceRule.isEnabled() && checkBoxDominanceRule.isSelected();
        labelNumber.setEnabled(b1);
        textFieldNumber.setEnabled(b1);
        labelPercentage.setEnabled(b1);
        textFieldPercentage.setEnabled(b1);
        labelPercSign1.setEnabled(b1);

        b1 = checkBoxPqRule.isEnabled() && checkBoxPqRule.isSelected();
        textFieldP.setEnabled(b1);
        textFieldQ.setEnabled(b1);
        textFieldN.setEnabled(b1);
        labelP.setEnabled(b1);
        labelQ.setEnabled(b1);
        labelN.setEnabled(b1);

        b1 = checkBoxMinimumFrequency.isEnabled() && checkBoxMinimumFrequency.isSelected();
        labelFrequency.setEnabled(b1);
        textFieldFrequency.setEnabled(b1);
        labelRange.setEnabled(b1);
        textFieldRange.setEnabled(b1);
        labelPercSign2.setEnabled(b1);

        b1 = checkBoxZeroUnsafe.isEnabled() && checkBoxZeroUnsafe.isSelected();
        labelZeroMargin.setEnabled(b1);
        textFieldZeroMargin.setEnabled(b1);
    }
    
    private void safetyRulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_safetyRulesActionPerformed
        organizeSafetyRules();
    }//GEN-LAST:event_safetyRulesActionPerformed

     private JFrame getParentFrame() {
        Container container = this;
        while (!(container instanceof JFrame)) {
            container = container.getParent();
        }
        return (JFrame)container;
    }
     
    private void buttonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOkActionPerformed
        if (!SwingUtils.verifyTextFields(this)) {
            return;
        }
        if (!verify()) {
            return;
        }
        TableService.clearTables();
        //Anco: lijkt me onzin om hier alle tabellen te behandelen; leuk voor linked tables
        for (int i = 0; i < Application.numberOfMetadatas(); i++) {
            Metadata metadata = Application.getMetadata(i);
            TableSet table = new TableSet(metadata);
            TableService.addTable(table);
            save(table);
        }
     
        // The GUI thread (EDT) should not be used for long running tasks, 
        // so use the SwingWorker class
        final SwingWorker<Void, Void> worker = new ProgressSwingWorker<Void, Void>(ProgressSwingWorker.SINGLE, "Reading tables") {

            // called in a separate thread...
            @Override
            protected Void doInBackground() throws Exception {
                super.doInBackground();
                TableService.readTables(getPropertyChangeListener());
                return null;
            }

            // called on the GUI thread
            @Override
            public void done() {
                super.done();
                try {
                    get();
                    returnValue = APPROVE_OPTION;
                    setVisible(false);
                } catch (InterruptedException ex) {
                    LOGGER.log(Level.SEVERE, null, ex);
                } catch (ExecutionException ex) {
                    JOptionPane.showMessageDialog(DialogSpecifyTablesTabular.this, ex.getCause().getMessage() + "; something wrong");
                    if (TauArgusUtils.ExistFile(Application.getTempFile("additerr.txt"))){
                        DialogInfo Info = new DialogInfo(getParentFrame(), true);
                        Info.addLabel("Overview of the additivity errors");
                        try{
                            Info.addTextFile(Application.getTempFile("additerr.txt"));}
                        catch (ArgusException ex1){}
                        Info.setVisible(true);
                    }
                    TableService.clearTables();
                }
            }
        };        
        worker.execute();
    }//GEN-LAST:event_buttonOkActionPerformed

    private void buttonGroupCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGroupCostActionPerformed
        organizeCost();
    }//GEN-LAST:event_buttonGroupCostActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        TableService.clearTables();
        setVisible(false);
        dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void dialogClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_dialogClosing
        TableService.clearTables();
        setVisible(false);
        dispose();
    }//GEN-LAST:event_dialogClosing

    private void checkBoxKeepStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxKeepStatusItemStateChanged
        radioButtonUseGivenStatus.setSelected(checkBoxKeepStatus.isSelected());
        radioButtonUseSafetyRules.setEnabled(!checkBoxKeepStatus.isSelected());
        if (checkBoxKeepStatus.isSelected()) {
            SwingUtilities.invokeLater(() -> {
                JOptionPane.showMessageDialog(DialogSpecifyTablesTabular.this,
                        "This could potentially cause inconsistencies between statusses.\nE.g. when unsafe cells are copied to empty totals or when protected cells are used.",
                        "Use with caution!", JOptionPane.WARNING_MESSAGE);
            });
        }
    }//GEN-LAST:event_checkBoxKeepStatusItemStateChanged

    private void radioButtonAdditivityRecomputeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioButtonAdditivityRecomputeItemStateChanged
        boolean boolSelected = radioButtonAdditivityRecompute.isSelected();
        if (boolSelected){
            checkBoxKeepStatus.setEnabled(boolSelected && labelStatusVar.isEnabled());
            radioButtonUseGivenStatus.setSelected(checkBoxKeepStatus.isSelected());
            radioButtonUseSafetyRules.setEnabled(!checkBoxKeepStatus.isSelected());
        }
        else{
            checkBoxKeepStatus.setEnabled(false);
            radioButtonUseSafetyRules.setEnabled(labelTopNVarCount.isEnabled() || labelFrequencyVar.isEnabled());
            organizeSafetyRules();
        }
    }//GEN-LAST:event_radioButtonAdditivityRecomputeItemStateChanged

    boolean verify() {
        if (radioButtonUseSafetyRules.isEnabled() && radioButtonUseGivenStatus.isEnabled()) {
            if (!radioButtonUseSafetyRules.isSelected() && !radioButtonUseGivenStatus.isSelected()) {
                JOptionPane.showMessageDialog(radioButtonUseGivenStatus, "Select \"Use given status\" or \"Use safety rules\"", null, JOptionPane.ERROR_MESSAGE);
                radioButtonUseGivenStatus.requestFocusInWindow();
                return false;
            }
        }
        if (radioButtonUseSafetyRules.isEnabled() && radioButtonUseSafetyRules.isSelected()) {
            if (   (!checkBoxDominanceRule.isEnabled() || !checkBoxDominanceRule.isSelected())
                && (!checkBoxPqRule.isEnabled() || !checkBoxPqRule.isSelected())
                && (!checkBoxMinimumFrequency.isEnabled() || !checkBoxMinimumFrequency.isSelected()) ) {
                JOptionPane.showMessageDialog(checkBoxDominanceRule, "Select one of the rules", null, JOptionPane.ERROR_MESSAGE);
                checkBoxDominanceRule.requestFocusInWindow();
                return false;
            }
            if (checkBoxDominanceRule.isEnabled() && checkBoxDominanceRule.isSelected()) {
                int n = Integer.parseInt(textFieldNumber.getText());
                if (n > Integer.parseInt(labelTopNVarCount.getText())) {
                    JOptionPane.showMessageDialog(textFieldNumber, "Not enough TopN variables for this dom.-rule", null, JOptionPane.ERROR_MESSAGE);
                    textFieldNumber.requestFocusInWindow();
                    return false;
                }
            }
            if (checkBoxPqRule.isEnabled() && checkBoxPqRule.isSelected()) {
                int n = Integer.parseInt(textFieldN.getText());
                if (n + 1 > Integer.parseInt(labelTopNVarCount.getText())) {
                    JOptionPane.showMessageDialog(textFieldN, "Not enough TopN variables for this P%-rule", null, JOptionPane.ERROR_MESSAGE);
                    textFieldN.requestFocusInWindow();
                    return false;
                }
            }
        }
        if (checkBoxMinimumFrequency.isSelected()) {
            int X;
            X = Integer.parseInt(textFieldFrequency.getText());
            if (X < 1) {
                JOptionPane.showMessageDialog(textFieldFrequency, "Illegal value for the min freq rule (" + textFieldFrequency.getText() + ")", null, JOptionPane.ERROR_MESSAGE);
                textFieldFrequency.requestFocusInWindow();
                return false;
            }
            X = Integer.parseInt(textFieldRange.getText());
            if (X < 0) {
                JOptionPane.showMessageDialog(textFieldRange, "Illegal value for the min freq rule range (" + textFieldRange.getText() + ")", null, JOptionPane.ERROR_MESSAGE);
                textFieldRange.requestFocusInWindow();
                return false;
            }
            if (X == 0) {
                int option = JOptionPane.showConfirmDialog(textFieldRange, "Zero value for min. frequency range might lead to poor protection\nDo you want to proceed?", null, JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);
                if (option == JOptionPane.NO_OPTION) {
                    textFieldRange.requestFocusInWindow();
                    return false;
                }
            }
        }
        return true;
    }

    void load(Metadata metadata) {
        // Fill "Variables" panel...
        DefaultListModel<String> model = new DefaultListModel<>();
        for (Variable variable : metadata.variables) {
            if (variable.isCategorical()) {
                 model.addElement(variable.name);
            }
        }
        listExpVar.setModel(model);
        
        labelNExpVarCount.setText(Integer.toString(metadata.numberOfExplanatoryVariables()));
        int n = metadata.numberOfTopNVariables();
        labelTopNVar.setEnabled(n > 0);
        labelTopNVarCount.setEnabled(n > 0);
        labelTopNVarCount.setText(Integer.toString(n));
        labelStatusVar.setEnabled(metadata.containsStatusVariable());
        labelFrequencyVar.setEnabled(metadata.containsFrequencyVariable());
        labelCostVar.setEnabled(metadata.containsCostVariable());

        // Fill cost panel...
        radioButtonCostVar.setEnabled(labelCostVar.isEnabled());
        radioButtonFrequency.setEnabled(labelFrequencyVar.isEnabled());
        radioButtonDistance.setEnabled(metadata.containsDistanceFunction());
        labelMaxScaleCost.setVisible(Application.isAnco());
        textFieldMaxScaleCost.setVisible(Application.isAnco());
        
        // Fill safety rules panel...
        radioButtonUseGivenStatus.setEnabled(labelStatusVar.isEnabled());
        radioButtonUseSafetyRules.setEnabled(labelTopNVarCount.isEnabled() || labelFrequencyVar.isEnabled());

        // Auto choose when there is only one available
        if (radioButtonUseGivenStatus.isEnabled() && !radioButtonUseSafetyRules.isEnabled())  {
            radioButtonUseGivenStatus.setSelected(true);
        }
        if (!radioButtonUseGivenStatus.isEnabled() && radioButtonUseSafetyRules.isEnabled())  {
            radioButtonUseSafetyRules.setSelected(true);
        }
        
        textFieldQ.setVisible(Application.isAnco());
        labelQ.setVisible(Application.isAnco());
        if (!Application.isAnco()) {
            checkBoxPqRule.setText("P% rule");
            textFieldQ.setText("100");
        }
        
        textFieldMaxScaleCost.setText("20000");
        textFieldLambda.setText("1");

        textFieldNumber.setText("3");
        textFieldPercentage.setText("75");

        textFieldP.setText("10");
        textFieldQ.setText("100");
        textFieldN.setText("1");

        textFieldFrequency.setText("2");
        textFieldRange.setText("20");
        
        textFieldZeroMargin.setText("10");
        textFieldManualSafetyRange.setText("20");

        // force a selection
        radioButtonResponseVar.setSelected(true);
        radioButtonAdditivityForce.setSelected(true);
        checkBoxKeepStatus.setEnabled(false);
        organizeCost();
        organizeSafetyRules();
    }

    private void save(TableSet table) {
        if (radioButtonResponseVar.isSelected()) {
            table.costFunc = TableSet.COST_VAR;
            table.costVar = table.respVar;
        } else if (radioButtonCostVar.isSelected()) {
            table.costFunc = TableSet.COST_VAR;
        } else if (radioButtonFrequency.isSelected()) {
            table.costFunc = TableSet.COST_FREQ;
        } else if (radioButtonUnity.isSelected()) {
            table.costFunc = TableSet.COST_UNITY;
        } else { 
            table.costFunc = TableSet.COST_DIST;
        }
        table.lambda = Double.parseDouble(textFieldLambda.getText());
        table.maxScaleCost = Double.parseDouble(textFieldMaxScaleCost.getText());

        table.domRule = checkBoxDominanceRule.isEnabled() && checkBoxDominanceRule.isSelected();
        table.pqRule = checkBoxPqRule.isEnabled() && checkBoxPqRule.isSelected();
        table.frequencyRule = checkBoxMinimumFrequency.isEnabled() && checkBoxMinimumFrequency.isSelected();
        table.zeroUnsafe = checkBoxZeroUnsafe.isEnabled() && checkBoxZeroUnsafe.isSelected();

        if (table.domRule) {
            table.domN[0] = Integer.parseInt(textFieldNumber.getText());
            table.domK[0] = Integer.parseInt(textFieldPercentage.getText());
        }
        if (table.pqRule) {
            table.pqP[0] = Integer.parseInt(textFieldP.getText());
            table.pqQ[0] = Integer.parseInt(textFieldQ.getText());
            table.pqN[0] = Integer.parseInt(textFieldN.getText());
        }
        if (table.frequencyRule) {
            table.minFreq[0] = Integer.parseInt(textFieldFrequency.getText());
            table.frequencyMarge[0] = Integer.parseInt(textFieldRange.getText());
        } else {
            table.minFreq[0] = 0;
        }
        if (table.zeroUnsafe) {
            table.zeroRange = Double.parseDouble(textFieldZeroMargin.getText());
        }

        table.manualMarge = Integer.parseInt(textFieldManualSafetyRange.getText());
        table.missingIsSafe = checkBoxMissingIsSafe.isSelected();
        table.useStatusOnly = radioButtonUseGivenStatus.isEnabled() && radioButtonUseGivenStatus.isSelected();
        if (radioButtonAdditivityForce.isSelected()) {
            table.additivity = TableSet.ADDITIVITY_CHECK;
        } else if (radioButtonAdditivityRecompute.isSelected()) {
            table.additivity = TableSet.ADDITIVITY_RECOMPUTE;
            table.keepStatus = checkBoxKeepStatus.isSelected();
        } else if (radioButtonAdditivityNone.isSelected()) {
            table.additivity = TableSet.ADDITIVITY_NOT_REQUIRED;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.ButtonGroup buttonGroupAdditivity;
    private javax.swing.ButtonGroup buttonGroupCostFunction;
    private javax.swing.ButtonGroup buttonGroupSafetyRules;
    private javax.swing.JButton buttonOk;
    private javax.swing.JCheckBox checkBoxDominanceRule;
    private javax.swing.JCheckBox checkBoxKeepStatus;
    private javax.swing.JCheckBox checkBoxMinimumFrequency;
    private javax.swing.JCheckBox checkBoxMissingIsSafe;
    private javax.swing.JCheckBox checkBoxPqRule;
    private javax.swing.JCheckBox checkBoxZeroUnsafe;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelCostVar;
    private javax.swing.JLabel labelExpVar;
    private javax.swing.JLabel labelFrequency;
    private javax.swing.JLabel labelFrequencyVar;
    private javax.swing.JLabel labelLambda;
    private javax.swing.JLabel labelManualSafetyRange;
    private javax.swing.JLabel labelMaxScaleCost;
    private javax.swing.JLabel labelN;
    private javax.swing.JLabel labelNExpVar;
    private javax.swing.JLabel labelNExpVarCount;
    private javax.swing.JLabel labelNumber;
    private javax.swing.JLabel labelP;
    private javax.swing.JLabel labelPercSign1;
    private javax.swing.JLabel labelPercSign2;
    private javax.swing.JLabel labelPercSign3;
    private javax.swing.JLabel labelPercentage;
    private javax.swing.JLabel labelQ;
    private javax.swing.JLabel labelRange;
    private javax.swing.JLabel labelStatusVar;
    private javax.swing.JLabel labelTopNVar;
    private javax.swing.JLabel labelTopNVarCount;
    private javax.swing.JLabel labelZeroMargin;
    private javax.swing.JList<String> listExpVar;
    private javax.swing.JPanel panelCost;
    private javax.swing.JPanel panelSafetyRules;
    private javax.swing.JPanel panelVariables;
    private javax.swing.JRadioButton radioButtonAdditivityForce;
    private javax.swing.JRadioButton radioButtonAdditivityNone;
    private javax.swing.JRadioButton radioButtonAdditivityRecompute;
    private javax.swing.JRadioButton radioButtonCostVar;
    private javax.swing.JRadioButton radioButtonDistance;
    private javax.swing.JRadioButton radioButtonFrequency;
    private javax.swing.JRadioButton radioButtonResponseVar;
    private javax.swing.JRadioButton radioButtonUnity;
    private javax.swing.JRadioButton radioButtonUseGivenStatus;
    private javax.swing.JRadioButton radioButtonUseSafetyRules;
    private javax.swing.JScrollPane scrollPaneExpVar;
    private javax.swing.JTextField textFieldFrequency;
    private javax.swing.JTextField textFieldLambda;
    private javax.swing.JTextField textFieldManualSafetyRange;
    private javax.swing.JTextField textFieldMaxScaleCost;
    private javax.swing.JTextField textFieldN;
    private javax.swing.JTextField textFieldNumber;
    private javax.swing.JTextField textFieldP;
    private javax.swing.JTextField textFieldPercentage;
    private javax.swing.JTextField textFieldQ;
    private javax.swing.JTextField textFieldRange;
    private javax.swing.JTextField textFieldZeroMargin;
    // End of variables declaration//GEN-END:variables
}
