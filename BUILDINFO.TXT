===================
General information
===================

Used tools:
- Netbeans IDE
- Java version 1.7 or higher
- Swig
- Gnu C/C++/fortran compilers (MinGW-64 under Windows)
- Lazarus (with FPC)


Tau-argus is developed with the Netbeans IDE.

The easiest way to build/compile tau-argus is to make use of the Netbeans IDE.
When installing Netbeans, make sure to include the C/C++ plugins.

Used additional software:
SCIP 3.1.x 	(http://scip.zib.de)
Soplex 2.0.x 	(http://scip.zib.de)
Install SCIP and Soplex, e.g.,
in directory with soplex: run "make ZLIB=false GMP=false"
in directory with SCIP: run "make LPS=spx ZLIB=false GMP=false READLINE=false ZIMPL=false"
Read INSTALL in download of SCIP and Soplex for more information.


=========================================
Several projects are defined in Netbeans:
=========================================

ArgusLib, CRP, CSP, TauArgus, TauArgusJava, TauHiTaS, TauRounder
	

ArgusLib (General functions used by both tau-argus and mu-argus. Java. Produces jar-file)
==========================================================================================
Just build it.


CRP (Controlled Rounding. C/C++. Produces a dynamic lybrary (.dll or .so))
==========================================================================
Adjust the Makefile to your own situation. This means, adjust directories and/or versions of used solvers.

E.g., the Makefile in the distribution makes use of Cplex122, located in "../cplex".


CSP (Cell suppression. C/C++. Produces dynamic lybraries (.dll or .so))
=======================================================================
Adjust the include directories and used libraries to your own situation ("Project Properties/Build/C Compiler" and "Project Properties/Build/Linker" ).

With this source code, three dynamic libraries need to be build:
CSPlibCPLEX.dll or libCSPlibCPLEX.so
	Adjust Output field in "Project Properties/Build/Linker" to reflect name of dynamic library
	Adjust Preprocessor Definitions under "Project Properties/Build/C Compiler" to MICROSOFT CPLEX7
CSPlibXPRESS.dll or libCSPlibXPRESS.so
	Adjust Output field in "Project Properties/Build/Linker" to reflect name of dynamic library
	Adjust Preprocessor Definitions under "Project Properties/Build/C Compiler" to MICROSOFT XPRESS_13
CSPlibSCIP.dll or libCSPlibSCIP.so
	Adjust Output field in "Project Properties/Build/Linker" to reflect name of dynamic library
	Adjust Preprocessor Definitions under "Project Properties/Build/C Compiler" to MICROSOFT VSCIP soplex


TauArgus (Java implementation of the GUI. Produces jar-file)
============================================================
Just build it.


TauArgusJava (Functionality (a.o. data manipulation) of tau-argus in C/C++. Produces dynamic library (.dll or .so))
===================================================================================================================
Under the "Resource Files", right click TauArgusJava.swg, select Properties, adjust "Command Line" under "Custom Build Step" to reflect your own system-directories.
In the Makefile, adjust the directories to reflect your own system.


TauHiTaS (Modular approach. Uses CSP-libraries. C/C++. Produces dynamic library (.dll or .so))
==============================================================================================
Under the "Resource Files", right click hitasctrl.swg, select Properties, adjust "Command Line" under "Custom Build Step" to reflect your own system-directories.
Adjust directories in "Project Properties/Build/C++ Compiler", field "Include Directories" to reflect your own system.
Adjust libraries in "Project Properties/Linker", field "Additional Library Directories" and field "Libraries" to reflect your own system.


TauRounder (Wrapper for rounding. Uses CRP-library. C/C++. Produces dynamic library (.dll or .so))
==================================================================================================
Under the "Resource Files", right click RounderCtrl.swg, select Properties, adjust "Command Line" under "Custom Build Step" to reflect your own system-directories.
Adjust directories in "Project Properties/Build/C++ Compiler", field "Include Directories" to reflect your own system.
Adjust libraries in "Project Properties/Linker", field "Additional Library Directories" and field "Libraries" to reflect your own system.


================================
Software not as Netbeans project
================================

Hypercube
=========
Compile with gfortran.

CTA
===
Compile along the instructions in README of the distribution of CTA

Audit (Intervalle)
==================
Compile IntervalleBETA either within Lazarus or using the commandline version of FPC.
